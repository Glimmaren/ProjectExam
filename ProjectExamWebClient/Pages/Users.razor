@page "/user"

@using Costumer.Models
@using Customer.Models
@using Microsoft.AspNetCore.Components
@using ProjectExamWebClient.Data.Services.CustomerServices
@inject IRoleService roleService
@inject ICompanyService companyService
@inject IPersonLoginService personService
@using ProjectExamWebClient.Interfaces
@using System.Security.Cryptography.X509Certificates
@using Syncfusion.Blazor.Grids



    <h3><b>Personer</b></h3>    

<div>

    <AuthorizeView Roles="Admin">
        <Authorized Context="Person">
        <SfButtonGroup>
            <ButtonGroupButton @onclick="@(() => AddPersonVisibility = !AddPersonVisibility)">Lägg till Person</ButtonGroupButton>
            <ButtonGroupButton @onclick="@(() => AddRoleVisibility = !AddRoleVisibility)">Lägg till Roll</ButtonGroupButton>
        </SfButtonGroup>
        <RegisterUser UpdateGrid="@UpdateGrid" Visible="@AddPersonVisibility"/>
        <AddRole Visible="@AddRoleVisibility"/>
        </Authorized >
    </AuthorizeView >
    

    @if (@persons != null)
    {
        <SfDialog Target="#target" Width="300px" ShowCloseIcon="true" @bind-Visible="UpdateDialogVisibility" AllowPrerender="true" IsModal="true">
            <DialogTemplates>
                <Header> Uppdatera Person </Header>
                <Content>
                    <div class="col-12 row">
                        <input class="form-control col-12" @bind="person.FirstName" placeholder="first name"/>
                    </div>
                    <br/>
                    <div class="col-12 row">
                        <input class="form-control col-12" @bind="person.LastName" placeholder="last name"/>
                    </div>
                    <br/>
                    <div class="col-12 row">
                        <input class="form-control col-12" @bind="person.PhoneNumber" placeholder="telefonnummer"/>
                    </div>
                    <br/>
                    <div class="col-12 row">
                        <SfComboBox TItem="Company" TValue="string" DataSource="@companies" Placeholder="företag">
                            <ComboBoxEvents TValue="string" TItem="Company" OnValueSelect="@OnCompanyValueSelectHandler"></ComboBoxEvents>
                            <ComboBoxFieldSettings Value="Id" Text="Name">
                            </ComboBoxFieldSettings>
                        </SfComboBox>
                    </div>
                    <br/>
                    <div class="col-12 row">
                        <SfComboBox TItem="Role" TValue="string" DataSource="@roles" Placeholder="roll">
                            <ComboBoxEvents TValue="string" TItem="Role" OnValueSelect="@OnRoleValueSelectHandler"></ComboBoxEvents>
                            <ComboBoxFieldSettings Value="Id" Text="Name">
                            </ComboBoxFieldSettings>
                        </SfComboBox>
                    </div>
                    <br/>
                    <div class="col-12 row">
                        <input class="form-control col-12" @bind="person.Email" placeholder="email address"/>
                    </div>
                    <br/>
                    <div class="col-12 row">
                        <input type="password" class="form-control col-12" @bind="person.Password" placeholder="password"/>
                    </div>
                    <br/>
                    <div class="col-12 row">
                        <span class="col-12"></span>

                        @*<input type="submit" class="form-control col-6 btn btn-primary" value="Uppdatera" />*@
                    </div>
                    <br/>
                </Content>

            </DialogTemplates>
            <DialogButtons>
                <DialogButton Content="Uppdatera" IsPrimary="true" OnClick="@(() => UpdatePerson(person))"/>
                <DialogButton Content="Avbryt"/>
            </DialogButtons>
        </SfDialog>


        <SfGrid @ref="Grid" DataSource="@persons" AllowSorting="true">
            <GridColumns>
                <GridColumn Field=@nameof(Person.FirstName) HeaderText="Förnamn" TextAlign="TextAlign.Center" Width="60"></GridColumn>
                <GridColumn Field=@nameof(Person.LastName) HeaderText="Efternamn" TextAlign="TextAlign.Center" Width="60"></GridColumn>
                <GridColumn Field=@nameof(Person.Email) HeaderText="Email" TextAlign="TextAlign.Center" Width="60"></GridColumn>
                <GridColumn Field="Company.Name" HeaderText="Företag" TextAlign="TextAlign.Center" Width="60"></GridColumn>
                <GridColumn Field="Role.Name" HeaderText="Roll" TextAlign="TextAlign.Center" Width="60"></GridColumn>
                <GridColumn Field="Role.Name" HeaderText="Roll" TextAlign="TextAlign.Center" Width="60"></GridColumn>
                <AuthorizeView Roles="Admin">
                    <Authorized Context="Person">
                        <GridColumn Field="" HeaderText=" " TextAlign="TextAlign.Center" Width="60">
                            <Template Context="person">

                                @{
                                    <div>
                                        <a style="text-underline-position: below; cursor: pointer; color: blue" @onclick="(() => EditPerson(person))">Till Profil</a> |
                                        <a style="text-underline-position: below; cursor: pointer; color: blue" @onclick="(() => DeletePerson(person))">Ta bort</a>
                                    </div>
                                }
                            </Template>
                        </GridColumn>
                    </Authorized>
                </AuthorizeView>
            </GridColumns>
        </SfGrid>
    }
</div>

@code {
    public Person newPerson { get; set; }
    public Person person { get; set; }
    public string LoginMessage { get; set; }
    public IList<Role> roles { get; set; }
    public IList<Person> filteredPersonList { get; set; }
    public IList<Person> persons { get; set; }
    public IList<Company> companies { get; set; }
    public string confirmPassword { get; set; }
    public int selectedRoleId { get; set; }
    public int selectedCompanyId { get; set; }
    public bool IsGridViewFiltered { get; set; }
    SfGrid<Person> Grid { get; set; }
    bool isLoading = true;
    bool UpdateDialogVisibility { get; set; } = false;   
    bool AddPersonVisibility { get; set; } = false;
    bool AddRoleVisibility { get; set; } = false;
    bool AddCompanyVisibility { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        newPerson = new Person();
        person = new Person();
        persons = new List<Person>();
        companies = await PopulateCompanies();
        roles = await PopulateRoles();
        persons = await PopulatePersons();
        await base.OnInitializedAsync();
    }


    private async Task<IList<Role>> PopulateRoles()
    {
        return await roleService.ListAllRoles();
    }

    private async Task<IList<Company>> PopulateCompanies()
    {
        return await companyService.ListAllCompanies();
    }

    private async Task<IList<Person>> PopulatePersons()
    {
        return await personService.ListAllPersons();
    }

    private void OnRoleValueSelectHandler(SelectEventArgs<Role> args)
    {
        selectedRoleId = args.ItemData.Id;
    }

    private void OnCompanyValueSelectHandler(SelectEventArgs<Company> args)
    {
        selectedCompanyId = args.ItemData.Id;
    }

    private async void UpdateGrid()
    {
        persons = await PopulatePersons();
    //await Grid.Refresh();
        StateHasChanged();
    }

    private async Task UpdateGrid2()
    {
        
    }

    private async Task EditPerson(Object obj)
    {
        UpdateDialogVisibility = true;
        person = (Person) obj;
    }

    private async Task DeletePerson(Object obj)
    {
        var tempPerson = (Person) obj;
        if (!await personService.DeletePerson(tempPerson.Id))
            LoginMessage = "Something went wrong";

        persons = await PopulatePersons();
        await Grid.Refresh();
    }

    private async Task UpdatePerson(Person person)
    {

    }

    private void OnPersonsSearchTextChanged(ChangeEventArgs changeEventArgs, string columnTitle)
    {
        string searchText = changeEventArgs.Value.ToString();
        IsGridViewFiltered = true;

        switch (columnTitle)
        {

            case "Förnamn":
                filteredPersonList = persons.Where(pers => pers.FirstName.ToLower().Contains(searchText)).ToList();
                break;
            case "Efternamn":
                filteredPersonList = persons.Where(pers => pers.LastName.ToLower().Contains(searchText)).ToList();
                break;
            case "Företag":
                filteredPersonList = persons.Where(pers => pers.Company.Name.ToLower().Contains(searchText)).ToList();
                break;
            case "Email":
                filteredPersonList = persons.Where(pers => pers.FirstName.ToLower().Contains(searchText)).ToList();
                break;
            case "Roll":
                filteredPersonList = persons.Where(pers => pers.Role.Name.ToString().Contains(searchText)).ToList();
                break;
            default:
                Console.WriteLine("Default case");
                break;
        }
    }

}
